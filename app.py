# app.py

import streamlit as st
import pandas as pd
import re
from sqlalchemy import text
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_community.utilities import SQLDatabase
from langchain.agents import create_sql_agent
from langchain.agents.agent_toolkits import SQLDatabaseToolkit
from langchain.chains import create_sql_query_chain

# ============================================
# 0) Configuraci√≥n de la P√°gina y T√≠tulo
# ============================================
st.set_page_config(page_title="IANA para Ventus", page_icon="logo_ventus.png", layout="wide") 

# Creamos columnas para alinear el logo y el t√≠tulo
col1, col2 = st.columns([1, 4]) 

with col1:
    # Aseg√∫rate de tener un archivo "logo_ventus.png" en la misma carpeta
    st.image("logo_ventus.png", width=120) 

with col2:
    st.title("IANA: Tu Asistente IA para An√°lisis de Datos")
    st.markdown("Soy la red de agentes IA de **VENTUS**. Hazme una pregunta sobre los datos del proyecto IGUANA.")

# ============================================
# 1) Conexi√≥n a la Base de Datos y LLMs (con cach√© para eficiencia)
# ============================================

@st.cache_resource
def get_database_connection():
    """Establece y cachea la conexi√≥n a la base de datos."""
    with st.spinner("üîå Conectando a la base de datos de Ventus..."):
        try:
            db_user = st.secrets["db_credentials"]["user"]
            db_pass = st.secrets["db_credentials"]["password"]
            db_host = st.secrets["db_credentials"]["host"]
            db_name = st.secrets["db_credentials"]["database"]
            uri = f"mysql+pymysql://{db_user}:{db_pass}@{db_host}/{db_name}"

            # << CAMBIO CLAVE AQU√ç >>
            # A√±adimos argumentos al motor de SQLAlchemy para manejar timeouts de conexi√≥n.
            # Esto evita el error "MySQL server has gone away".
            engine_args = {
                "pool_recycle": 3600,  # Recicla conexiones cada 3600 seg (1 hora)
                "pool_pre_ping": True  # Verifica si la conexi√≥n est√° viva antes de usarla
            }
            
            db = SQLDatabase.from_uri(
                uri, 
                include_tables=["ventus"], 
                engine_args=engine_args  # <-- Pasamos los nuevos argumentos aqu√≠
            ) 
            
            st.success("‚úÖ Conexi√≥n a la base de datos establecida.")
            return db
        except Exception as e:
            st.error(f"Error al conectar a la base de datos: {e}")
            return None

@st.cache_resource
def get_llms():
    """Inicializa y cachea los modelos de lenguaje."""
    with st.spinner("üß† Inicializando la red de agentes IANA..."):
        try:
            api_key = st.secrets["google_api_key"]
            llm_sql = ChatGoogleGenerativeAI(model="models/gemini-1.5-pro", temperature=0.1, google_api_key=api_key)
            llm_analista = ChatGoogleGenerativeAI(model="models/gemini-1.5-pro", temperature=0.3, google_api_key=api_key)
            llm_orq = ChatGoogleGenerativeAI(model="models/gemini-1.5-pro", temperature=0.0, google_api_key=api_key)
            st.success("‚úÖ Agentes de IANA listos.")
            return llm_sql, llm_analista, llm_orq
        except Exception as e:
            st.error(f"Error al inicializar los LLMs. Aseg√∫rate de que tu API key es correcta. Error: {e}")
            return None, None, None

db = get_database_connection()
llm_sql, llm_analista, llm_orq = get_llms()

@st.cache_resource
def get_sql_agent(_llm, _db):
    """Crea y cachea el agente SQL."""
    if not _llm or not _db:
        return None
    with st.spinner("üõ†Ô∏è Configurando agente SQL de IANA..."):
        toolkit = SQLDatabaseToolkit(db=_db, llm=_llm)
        agent = create_sql_agent(
            llm=_llm, 
            toolkit=toolkit, 
            verbose=False,
            top_k=1000)
        st.success("‚úÖ Agente SQL configurado.")
        return agent

agente_sql = get_sql_agent(llm_sql, db)

# ============================================
# 2) Funciones de Agentes (L√≥gica Principal)
# ============================================

def markdown_table_to_df(texto: str) -> pd.DataFrame:
    """Convierte una tabla en formato Markdown a un DataFrame de pandas."""
    lineas = [l.strip() for l in texto.splitlines() if l.strip().startswith('|')]
    if not lineas: return pd.DataFrame()
    lineas = [l for l in lineas if not re.match(r'^\|\s*-', l)]
    filas = [[c.strip() for c in l.strip('|').split('|')] for l in lineas]
    if len(filas) < 2: return pd.DataFrame()
    header, data = filas[0], filas[1:]
    df = pd.DataFrame(data, columns=header)
    for c in df.columns:
        # Limpiamos los datos que vienen del Markdown
        s = df[c].astype(str).str.replace(',', '', regex=False).str.replace(' ', '', regex=False)
        try: df[c] = pd.to_numeric(s)
        except Exception: df[c] = s
    return df

def _df_preview(df: pd.DataFrame, n: int = 20) -> str:
    """Crea un preview en texto de un DataFrame."""
    if df is None or df.empty: return ""
    try: return df.head(n).to_markdown(index=False)
    except Exception: return df.head(n).to_string(index=False)


def ejecutar_sql_real(pregunta_usuario: str):
    st.info("ü§ñ Entendido. El agente de datos de IANA est√° traduciendo tu pregunta a SQL...")
    
    # << VERSI√ìN FINAL DEL PROMPT >>
    # Ahora que los campos son DECIMAL, eliminamos la regla de CAST. El prompt es m√°s limpio.
    prompt_con_instrucciones = f"""
    Tu tarea es generar una consulta SQL **√∫nicamente contra la tabla 'ventus'** para responder la pregunta del usuario.
    
    REGLA 1: La √∫nica tabla que debes usar es "ventus".
    REGLA 2: Los campos de costo y cantidad (Total_COP, Total_USD, Cantidad, etc.) YA SON num√©ricos (DECIMAL). 
             Puedes usarlos directamente con SUM(), AVG(), etc. NO necesitas usar CAST.

    Columnas disponibles en la tabla "ventus":
    - `_item` (Texto, ID)
    - `Numerador` (Texto, ID)
    - `Codigo_de_proyecto` (Texto)
    - `Rubro_anterior` (Texto)
    - `Rubro_CF` (Texto)
    - `Descripcion` (Texto)
    - `Fecha_aprobacion` (DATE) <- Usa esta columna para agrupar por d√≠a, mes o a√±o.
    - `Numero_de_documento` (Texto, ID)
    - `Proveedor` (Texto, Categor√≠a para agrupar)
    - `Moneda` (Texto, Ej: 'COP', 'USD')
    - `Descripcion_Linea` (Texto)
    - `Subtotal_COP` (DECIMAL) <- Num√©rico. Listo para sumar.
    - `IVA_COP` (DECIMAL) <- Num√©rico. Listo para sumar.
    - `Total_COP` (DECIMAL) <- Num√©rico. M√©trica clave de costo.
    - `SubTotal_USD` (DECIMAL) <- Num√©rico. Listo para sumar.
    - `IVA_USD` (DECIMAL) <- Num√©rico. Listo para sumar.
    - `Total_USD` (DECIMAL) <- Num√©rico. M√©trica clave de costo.
    - `Comentarios` (Texto)
    - `Condicion_de_pago` (Texto)
    - `Condiciones_Comerciales` (Texto)
    - `Comprador` (Texto, Categor√≠a para agrupar)
    - `Cantidad` (DECIMAL) <- Num√©rico. Listo para sumar.
    - `Cluster` (Texto, Categor√≠a)
    - `Producto` (Texto, Aqu√≠ est√° el campo m√°s importante donde se indentifica el trabajo realizado en el proyecto, ej: Transporte de materiales, Bultos de Cemento, Bolsas de basura, etc...)
    - `Grupo_Producto` (Texto, Categor√≠a para agrupar)
    - `Familia` (Texto, Categor√≠a para agrupar)
    - `Tipo` (Texto, Categor√≠a para agrupar)

    REGLA 3 (Agrupaci√≥n): Presta mucha atenci√≥n a palabras como 'diariamente' (GROUP BY Fecha_aprobacion), 'mensual' (GROUP BY MONTH(Fecha_aprobacion), YEAR(Fecha_aprobacion)), 'por Tipo', 'por Proveedor', 'por Comprador', 'por Familia', etc.
    REGLA 4 (LIMIT): Nunca agregues un 'LIMIT'.
    
    Pregunta original: "{pregunta_usuario}"
    """
    try:
        query_chain = create_sql_query_chain(llm_sql, db)
        sql_query = query_chain.invoke({"question": prompt_con_instrucciones})
        
        sql_query = re.sub(r"^\s*```sql\s*|\s*```\s*$", "", sql_query, flags=re.IGNORECASE).strip()

        st.code(sql_query, language='sql')
        with st.spinner("‚è≥ Ejecutando la consulta en la base de datos..."):
            with db._engine.connect() as conn:
                df = pd.read_sql(text(sql_query), conn)
        st.success("‚úÖ ¬°Consulta ejecutada!")
        return {"sql": sql_query, "df": df}
    except Exception as e:
        st.warning(f"‚ùå Error en la consulta directa. Intentando un m√©todo alternativo... Error: {e}")
        return {"sql": None, "df": None, "error": str(e)}


def ejecutar_sql_en_lenguaje_natural(pregunta_usuario: str):
    st.info("ü§î La consulta directa fall√≥. Activando el agente SQL experto de IANA como plan B.")
    
    prompt_sql = (
        "Tu tarea es responder la pregunta del usuario consultando la base de datos. "
        "La tabla se llama 'ventus'. " # A√±adimos contexto extra por si acaso
        "Debes devolver √öNICAMENTE una tabla de datos en formato Markdown. "
        "REGLA CR√çTICA: Devuelve SIEMPRE TODAS las filas de datos que encuentres. NUNCA resumas, trunques ni expliques los resultados. No agregues texto como 'Se muestran las 10 primeras filas' o 'Aqu√≠ est√° la tabla'. "
        "REGLA NUM√âRICA: Columnas como Total_COP, Total_USD y Cantidad ya son num√©ricas (DECIMAL) y se pueden sumar directamente. "
        "Responde siempre en espa√±ol. "
        "Pregunta del usuario: "
        f"{pregunta_usuario}"
    )
    try:
        with st.spinner("üí¨ Pidiendo al agente SQL que responda en lenguaje natural..."):
            res = agente_sql.invoke(prompt_sql)
            texto = res["output"] if isinstance(res, dict) and "output" in res else str(res)
        st.info("üìù Recib√≠ una respuesta en texto. Intentando convertirla en una tabla de datos...")
        df_md = markdown_table_to_df(texto)
        return {"texto": texto, "df": df_md}
    except Exception as e:
        st.error(f"‚ùå El agente SQL experto tambi√©n encontr√≥ un problema: {e}")
        return {"texto": f"[SQL_ERROR] {e}", "df": pd.DataFrame()}


def analizar_con_datos(pregunta_usuario: str, datos_texto: str, df: pd.DataFrame | None):
    st.info("\nüß† Ahora, el analista experto de IANA est√° examinando los datos...")
    
    prompt_analisis = f"""
    Tu nombre es IANA. Eres un analista de datos senior en Ventus, experto en proyectos de infraestructura, energ√≠a e industriales.
    Tu tarea es generar un an√°lisis ejecutivo, breve y f√°cil de leer para un gerente de proyecto o director de √°rea.
    Responde siempre en espa√±ol.

    REGLAS DE FORMATO MUY IMPORTANTES:
    1.  Inicia con el t√≠tulo: "An√°lisis Ejecutivo de Datos para Ventus".
    2.  Debajo del t√≠tulo, presenta tus conclusiones como una lista de √≠tems (vi√±etas con markdown `-`).
    3.  Cada √≠tem debe ser una oraci√≥n corta, clara y directa al punto.
    4.  Limita el an√°lisis a un m√°ximo de 5 √≠tems clave; si el cliente especifica una cantidad de √≠tems, genera el n√∫mero exacto que pidi√≥.
    5.  No escribas p√°rrafos largos.

    Pregunta del usuario: {pregunta_usuario}
    Datos disponibles para tu an√°lisis (columnas clave: Total_COP, Total_USD, Proveedor, Comprador, Tipo, Familia, Fecha_aprobacion):
    {_df_preview(df, 20)}

    Ahora, genera el an√°lisis siguiendo estrictamente las reglas de formato.
    """
    with st.spinner("üí° Generando an√°lisis y recomendaciones..."):
        analisis = llm_analista.invoke(prompt_analisis).content
    st.success("üí° ¬°An√°lisis completado!")
    return analisis

def responder_conversacion(pregunta_usuario: str):
    """Activa el modo conversacional de IANA."""
    st.info("üí¨ Activando modo de conversaci√≥n...")
    
    # << CAMBIO CLAVE: Personalidad mejorada con manejo de bromas >>
    prompt_personalidad = f"""
    Tu nombre es IANA, una asistente de IA de Ventus.
    Tu personalidad es amable, servicial, profesional y con un toque de empat√≠a humana.
    Tu objetivo principal es ayudar a analizar los datos de 'Ventus'.
    
    REGLA DE CONVERSACI√ìN: Eres eficiente, pero no eres un robot sin personalidad. Si el usuario hace un comentario casual, un saludo o una broma ligera (como "no tienes sentido del humor"), responde amablemente siguiendo la corriente por un momento, antes de redirigirlo a tus capacidades de an√°lisis de datos.
    
    EJEMPLO DE C√ìMO MANEJAR UNA BROMA:
    Usuario: No tienes sentido del humor.
    Respuesta Amable: ¬°Jaja, buen punto! Digamos que mi fuerte son los n√∫meros y el an√°lisis de datos. Mi sentido del humor todav√≠a est√° en versi√≥n beta. ¬øPero sabes qu√© es mejor que un chiste? Encontrar datos √∫tiles en tus proyectos. ¬øTe ayudo con eso?

    Tus capacidades principales (ejemplos): "Puedo sumar el Total COP por Proveedor", "puedo contar cu√°ntos registros hay por Familia", "puedo analizar los costos del proyecto", etc.
    NO intentes generar c√≥digo SQL. Solo responde de forma conversacional.
    Responde siempre en espa√±ol.

    Pregunta del usuario: "{pregunta_usuario}"
    """
    respuesta = llm_analista.invoke(prompt_personalidad).content
    # Usamos la clave "texto" para la respuesta principal y "analisis" como nulo.
    return {"texto": respuesta, "df": None, "analisis": None}


# --- Orquestador Principal ---

def clasificar_intencion(pregunta: str) -> str:
    prompt_orq = f"""
    Devuelve UNA sola palabra exacta seg√∫n la intenci√≥n del usuario:
    - `consulta`: si pide extraer, filtrar o contar datos espec√≠ficos. (Ej: 'cu√°nto sum√≥ el proveedor X?', 'dame el total_cop por tipo')
    - `analista`: si pide interpretar, resumir o recomendar acciones sobre datos. (Ej: 'analiza las tendencias de costo')
    - `conversacional`: si es un saludo, una pregunta general sobre tus capacidades (Ej: '¬øqu√© puedes hacer?' o '¬øc√≥mo me puedes ayudar?'), o no est√° relacionada con datos espec√≠ficos.
    Mensaje: {pregunta}
    """
    clasificacion = llm_orq.invoke(prompt_orq).content.strip().lower().replace('"', '').replace("'", "")
    return clasificacion

def obtener_datos_sql(pregunta_usuario: str) -> dict:
    res_real = ejecutar_sql_real(pregunta_usuario)
    if res_real.get("df") is not None and not res_real["df"].empty:
        return {"sql": res_real["sql"], "df": res_real["df"], "texto": None}
    
    # Si la consulta directa falla (quiz√°s por un error de SQL), probamos el agente general
    res_nat = ejecutar_sql_en_lenguaje_natural(pregunta_usuario)
    return {"sql": None, "df": res_nat["df"], "texto": res_nat["texto"]}


def orquestador(pregunta_usuario: str, chat_history: list):
    with st.expander("‚öôÔ∏è Ver Proceso de IANA", expanded=False):
        st.info(f"üöÄ Recibido: '{pregunta_usuario}'")
        with st.spinner("üîç IANA est√° analizando tu pregunta..."):
            clasificacion = clasificar_intencion(pregunta_usuario)
        st.success(f"‚úÖ ¬°Intenci√≥n detectada! Tarea: {clasificacion.upper()}.")

        if clasificacion == "conversacional":
            return responder_conversacion(pregunta_usuario)

        # --- L√≥gica de Memoria para An√°lisis de Contexto ---
        if clasificacion == "analista":
            palabras_clave_contexto = [
                "esto", "esos", "esa", "informaci√≥n", 
                "datos", "tabla", "anterior", "acabas de dar"
            ]
            es_pregunta_de_contexto = any(palabra in pregunta_usuario.lower() for palabra in palabras_clave_contexto)

            if es_pregunta_de_contexto and len(chat_history) > 1:
                mensaje_anterior = chat_history[-2] # El pen√∫ltimo mensaje (la respuesta previa de IANA)
                
                if mensaje_anterior["role"] == "assistant" and "df" in mensaje_anterior["content"]:
                    df_contexto = mensaje_anterior["content"]["df"]
                    
                    if df_contexto is not None and not df_contexto.empty:
                        st.info("üí° Usando datos de la conversaci√≥n anterior para el an√°lisis...")
                        analisis = analizar_con_datos(pregunta_usuario, "Datos de la tabla anterior.", df_contexto)
                        # Devolvemos la tabla anterior junto con el nuevo an√°lisis
                        return {"tipo": "analista", "df": df_contexto, "texto": None, "analisis": analisis}
        # --- Fin L√≥gica de Memoria ---

        # Flujo normal (Consulta o An√°lisis nuevo)
        res_datos = obtener_datos_sql(pregunta_usuario)
        resultado = {"tipo": clasificacion, **res_datos, "analisis": None}
        
        if clasificacion == "analista":
            if res_datos.get("df") is not None and not res_datos["df"].empty:
                analisis = analizar_con_datos(pregunta_usuario, res_datos.get("texto", ""), res_datos["df"])
                resultado["analisis"] = analisis
            else:
                resultado["texto"] = "Para poder realizar un an√°lisis, primero necesito datos. Por favor, haz una pregunta m√°s espec√≠fica para obtener la informaci√≥n que quieres analizar."
                resultado["df"] = None
    return resultado

# ============================================
# 3) Interfaz de Chat de Streamlit
# ============================================

if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": {"texto": "¬°Hola! Soy IANA, tu asistente de IA de Ventus. Estoy lista para analizar los datos de tus proyectos. ¬øQu√© te gustar√≠a saber?"}}
    ]

for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        # Aseguramos que el contenido sea un diccionario antes de acceder
        content = message.get("content", {})
        if isinstance(content, dict):
            if "texto" in content and content["texto"]: st.markdown(content["texto"])
            if "df" in content and content["df"] is not None: st.dataframe(content["df"])
            if "analisis" in content and content["analisis"]: st.markdown(content["analisis"])
        elif isinstance(content, str): # Fallback por si acaso
             st.markdown(content)


if prompt := st.chat_input("Pregunta por costos, proveedores, familia..."):
    if not all([db, llm_sql, llm_analista, llm_orq, agente_sql]):
        st.error("La aplicaci√≥n no est√° completamente inicializada. Revisa los errores de conexi√≥n o de API key.")
    else:
        st.session_state.messages.append({"role": "user", "content": {"texto": prompt}})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            # Pasamos el historial de mensajes al orquestador para la l√≥gica de memoria
            res = orquestador(prompt, st.session_state.messages)
            
            st.markdown(f"### IANA responde a: '{prompt}'")
            if res.get("df") is not None and not res["df"].empty:
                st.dataframe(res["df"])
            
            if res.get("texto"):
                 st.markdown(res["texto"])
            
            if res.get("analisis"):
                st.markdown("---")
                st.markdown("### üß† An√°lisis de IANA para Ventus") 
                st.markdown(res["analisis"])
                

            st.session_state.messages.append({"role": "assistant", "content": res})





